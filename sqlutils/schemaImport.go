package sqlutils

import (
  "flag"
  "github.com/peter-mount/golib/kernel"
  "github.com/peter-mount/golib/kernel/db"
  "github.com/peter-mount/sortfold"
  "log"
)

// SchemaImport is a Kernel service which will configure a PostgreSQL/PostGIS database
// if a specified schema does not exist.
type SchemaImport struct {
  // Optional, schema that if absent causes an install on startup
  schema        string
  // Function to retrieve an asset, i.e. a bit of SQL
  // usually the AssetString method generated by go-bindata
  assetString   func(string) (string, error)
  // Function to return a slice of asset names,
  // usually the AssetNames method generated by go-bindata
  assetNames    func() []string
  // flag to determine if we need to import
  installFlag  *bool
  // The DB
  db           *db.DBService
}

func NewSchemaImport( schema string, assetString func(string) (string, error), assetNames func() []string ) *SchemaImport {
  return &SchemaImport{ schema: schema, assetString: assetString, assetNames: assetNames }
}

func (a *SchemaImport) Name() string {
  return "SqlService:" + a.schema
}

func (a *SchemaImport) Init( k *kernel.Kernel ) error {
  a.installFlag = flag.Bool( "setup-" + a.schema, false, "Install/Reinstall the database schema " + a.schema + ". THIS WILL ERASE ANY EXISTING DATA" )

  dbservice, err := k.AddService( &db.DBService{} )
  if err != nil {
    return err
  }
  a.db = (dbservice).(*db.DBService)

  return nil
}

func (a *SchemaImport) Start() error {

  if !*a.installFlag {
    // Check schema name exists & install if it doesn't
    exists, err := a.SchemaExists( a.schema )
    if err != nil {
      return err
    }
    *a.installFlag = !exists
  }

  if *a.installFlag {
    err := a.install()
    if err != nil {
      return err
    }
  }

  return nil
}

// Installed returns true if the database was initialised
func (a *SchemaImport) Installed() bool {
  if a.installFlag == nil {
    return false
  }
  return *a.installFlag
}

// SchemaExists returns true if a schema exists, false if not
func (a *SchemaImport) SchemaExists( schema string ) (bool, error) {
  row := a.db.QueryRow( "SELECT exists(select schema_name FROM information_schema.schemata WHERE schema_name = $1)", schema )
  var exists bool
  err := row.Scan( &exists )
  if err != nil {
    return false, err
  }
  return exists, nil
}

// Install runs all .sql files under the sql directory into PostGIS
func (a *SchemaImport) install() error {
  names := sortfold.StringSlice(a.assetNames())
  names.Sort()

  for _, name := range names {
    log.Println( a.schema, "executing", name )

    sql, err := a.assetString( name )
    if err != nil {
      return err
    }

    _, err = a.db.Exec( sql )
    if err != nil {
      return err
    }
  }
  return nil
}
